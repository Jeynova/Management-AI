# Import des biblioth√®ques n√©cessaires
import os
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain.schema import SystemMessage, HumanMessage
from dotenv import load_dotenv, find_dotenv

# Charger la cl√© API OpenAI
load_dotenv(find_dotenv())
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")

# Configuration de la page
st.set_page_config(
    page_title="Assistant Admin Conf√©rence",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Titre de la page
st.title("Assistant Admin - Gestion de Conf√©rence üìÖ")

# Sidebar pour les options principales
with st.sidebar:
    st.header("Bienvenue dans l'Assistant Admin !")
    st.write("""
        Cet assistant virtuel vous aide √† organiser et g√©rer votre conf√©rence technologique. 
        Il est con√ßu pour √™tre flexible et s'adapter √† vos besoins sp√©cifiques :
        - **Planification d'√©v√©nements**
        - **Cr√©ation de contenu**
        - **Analyse de fichiers**
        - **Communication et marketing**
    """)
    st.caption("Posez vos questions ou t√©l√©versez des fichiers pour commencer !")

    # Options principales dans la barre lat√©rale
    st.header("Que voulez-vous faire ?")
    choice = st.selectbox(
        "Choisissez une t√¢che :",
        ["Planification d'√©v√©nement", "Cr√©ation de contenu", "Analyse de fichiers", "Communication et marketing"]
    )

# Fonction pour envoyer une question √† l'assistant
def query_assistant(prompt):
    llm = ChatOpenAI(model="gpt-4", temperature=0.7)
    messages = [
        SystemMessage(content="Tu es un assistant sp√©cialis√© dans la cr√©ation de contenu pour des conf√©rences."),
        HumanMessage(content=prompt),
    ]
    response = llm.predict_messages(messages)
    return response.content  # R√©cup√®re uniquement le texte de la r√©ponse

# Fonction pour analyser un fichier t√©l√©vers√©
def analyze_file(df):
    st.write("**Aper√ßu des donn√©es**")
    st.write(df.head())

    # Agent Pandas pour l'analyse
    llm = ChatOpenAI(model="gpt-4", temperature=0.7)
    pandas_agent = create_pandas_dataframe_agent(
        llm, df, verbose=True, allow_dangerous_code=True, handle_parsing_errors=True
    )

    # Menu d√©roulant pour les analyses
    analysis_choice = st.selectbox(
        "Choisissez une analyse √† effectuer :",
        [
            "R√©sum√© global",
            "Tendances et projections",
            "Corr√©lations entre variables",
            "Graphiques",
        ]
    )

    if analysis_choice == "R√©sum√© global":
        try:
            summary = pandas_agent.run(
                """
                Analyse ce tableau en fran√ßais. Fournis une analyse compl√®te en expliquant :
                - L'utilit√© du tableau.
                - Les observations d√©taill√©es tir√©es des donn√©es.
                - Des recommandations exploitables.
                R√©ponds de mani√®re professionnelle et exhaustive en fran√ßais.
                """
            )
            st.write("**R√©sum√© global :**")
            st.write(summary)
        except ValueError as e:
            st.error("Une erreur s'est produite lors de l'analyse automatique.")
            st.exception(e)

    elif analysis_choice == "Tendances et projections":
        try:
            trends = pandas_agent.run(
                """
                Identifie les tendances majeures et propose des projections exploitables en fran√ßais. Explique clairement avec des exemples
                tir√©s des donn√©es.
                """
            )
            st.write("**Tendances et projections :**")
            st.write(trends)
        except ValueError as e:
            st.error("Une erreur s'est produite lors de l'analyse des tendances.")
            st.exception(e)

    elif analysis_choice == "Corr√©lations entre variables":
        try:
            correlations = pandas_agent.run(
                """
                Calcule les corr√©lations entre les variables. Explique les relations significatives et comment elles peuvent
                √™tre exploit√©es. R√©ponds en fran√ßais et de mani√®re claire.
                """
            )
            st.write("**Corr√©lations entre variables :**")
            st.write(correlations)
        except ValueError as e:
            st.error("Une erreur s'est produite lors de l'analyse des corr√©lations.")
            st.exception(e)

    elif analysis_choice == "Graphiques":
        st.write("**Cr√©ation de Graphiques :**")
        # Exemple : R√©partition des participants par pays
        if "Pays" in df.columns:
            country_counts = df["Pays"].value_counts()
            st.write("**R√©partition des participants par pays :**")
            fig, ax = plt.subplots()
            country_counts.plot(kind="bar", ax=ax)
            ax.set_title("R√©partition des participants par pays")
            ax.set_ylabel("Nombre de participants")
            ax.set_xlabel("Pays")
            st.pyplot(fig)
        else:
            st.warning("La colonne 'Pays' n'est pas disponible pour cr√©er ce graphique.")

# Gestion des choix
if choice == "Planification d'√©v√©nement":
    st.subheader("Planification d'√©v√©nement")
    st.write("Entrez les d√©tails pour planifier votre √©v√©nement.")
    event_name = st.text_input("Nom de l'√©v√©nement")
    dates = st.date_input("Dates importantes (par exemple, d√©but et fin)")
    tasks = st.text_area("Quelles sont les grandes √©tapes √† inclure ?")

    if st.button("G√©n√©rer un plan"):
        prompt = f"""
        Tu es un expert en planification d'√©v√©nements.
        Voici les d√©tails de l'√©v√©nement :
        - Nom : {event_name}
        - Dates : {dates}
        - √âtapes : {tasks}
        
        G√©n√®re un plan complet avec des √©tapes claires et des suggestions.
        """
        response = query_assistant(prompt)
        st.write(response)

elif choice == "Cr√©ation de contenu":
    st.subheader("Cr√©ation de contenu")
    st.write("Quel type de contenu voulez-vous cr√©er ?")
    content_type = st.selectbox("Type de contenu :", ["Titre de session", "Description", "Email", "Biographie"])
    content_details = st.text_area("Donnez les d√©tails n√©cessaires.")

    if st.button("G√©n√©rer le contenu"):
        prompt = f"""
        Tu es un expert en communication √©v√©nementielle. Cr√©e un {content_type} bas√© sur ces d√©tails :
        {content_details}
        """
        response = query_assistant(prompt)
        st.write(response)

elif choice == "Analyse de fichiers":
    st.subheader("Analyse de fichiers")
    uploaded_file = st.file_uploader("T√©l√©chargez un fichier CSV pour analyse", type=["csv"])

    if uploaded_file:
        uploaded_file.seek(0)
        df = pd.read_csv(uploaded_file)
        analyze_file(df)

elif choice == "Communication et marketing":
    st.subheader("Communication et marketing")
    st.write("Posez une question ou demandez des suggestions pour vos campagnes.")
    marketing_query = st.text_area("Votre question ou demande :")

    if st.button("Obtenir des conseils"):
        prompt = f"""
        Tu es un expert en communication et marketing √©v√©nementiel. Voici la situation :
        {marketing_query}
        Fournis des recommandations et des strat√©gies adapt√©es.
        """
        response = query_assistant(prompt)
        st.write(response)

# Footer
st.divider()
st.caption("Bonne chance √† tous pour votre validation. üöÄ")
